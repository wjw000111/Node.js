HTTP协议
    -网络基础
    -网络的服务基于请求和响应
    1.当浏览器中输入地址后发生了什么？
    https://                              lilichao.com                                                                                                                            /hello/index.html
    协议名:https,http(不安全),ftp(文件)    域名，整个网络中有无数个服务器，每个服务器都有他自己的唯一标识，这个标识被称为ip地址(192.168.1.17),但ip地址不方便记忆,域名相当于ip地址的别名        网站资源的路径
        ① 通过DNS服务器解析，获取网站的ip地址
        ② 浏览器和服务器建立连接(tcp/ip),(三次握手)
        ③ 向服务器发送请求(http协议)
        ④ 服务器处理请求，并返回响应(http协议)
        ⑤ 浏览器将响应的页面渲染
        ⑥ 断开和服务器的连接(四次挥手)
    
    2.客户端如何和服务器建立连接？
        -通过三次握手和四次挥手
            -三次握手(建立连接)
                -三次握手是客户端和服务器建立连接的过程
                    ① 客户端向服务器发送连接请求
                        发送SYN(符号)
                    ② 服务器收到连接请求，向客户端返回消息
                        返回SYN,ACK
                    ③ 客户端向服务器发送同意连接的信息
                        发送ACK
            -四次挥手(断开连接)
                ① 客户端向服务器发送请求，通知服务器数据发送完毕，请求断开连接
                    FIN
                ② 服务器向客户端返回数据，知道了
                    ACK
                ③ 服务器向客户端返回数据，收完了，可以断开连接
                    FIN , ACK
                ④ 客户端向服务器发数据，可以断开了
                    ACK

    请求和响应实际上就是一段数据，只是这段数据需要遵循一个特殊的格式,
        这个特殊的格式由http协议规定

    TCP/ip协议族：
        -TCP/IP协议族中包含了一组协议，这组协议规定了互联网中所有通信的细节
        -网络通信的过程：   
            (理论上七层，实际上四层)
            应用层
                -软件的层面，浏览器，服务器都属于应用层
            传输层
                -负责对数据进行拆分，把大数据拆分为一个个小包
            网络层
                -负责给数据包添加信息
            数据链路层
                -传输信息
        -HTTP协议是应用层的协议，用来规定客户端和服务器间通信的报文格式

    -服务器：
        -一个服务器的主要功能：
            1.可以接收浏览器发送的请求报文
            2.可以向浏览器返回响应报文
    -报文(message)是什么？
        -浏览器和服务器之间通信是基于请求和响应的，
            -浏览器向服务器发送请求(request)
            -服务器向浏览器返回响应(response)
            -浏览器向服务器发送请求相当于浏览器给服务器写信，服务器向浏览器返回响应，相当于服务器给浏览器回应,这个信在HTTP协议中就称为报文，而HTTP协议就是对报文的格式进行规定
        
        -请求报文(request)：
            -客户端发送给服务器的报文称为请求报文，请求报文的格式如下：
                请求首行
                    -就是报文的第一行,
                        GET /index.html?username=%E5%AD%99%E6%82%9F%E7%A9%BA HTTP/1.1
                        第一部分 get 表示请求的方式,get表示发送的是get请求
                            get请求主要用来向服务器请求资源
                            post请求主要用来向服务器发送请求
                        第二部分  /index.html?username=%E5%AD%99%E6%82%9F%E7%A9%BA
                            表示请求资源的路径,?后边的内容是查询字符串,查询字符串是一个名值对结构，一个名字对应一个值，多个名值对之间使用&分隔,
                                -get请求通过查询字符串将数据发送给服务器,由于查询字符串会在浏览器的地址栏中直接显示，
                                    安全性较差,
                                    同时由于url地址长度有限，get请求无法发送较大的数据
                                -post请求通过请求体发送数据(get没有请求体)
                                    -在chrome 中通过负载查看
                                    Post通过请求体发送数据，无法在地址栏直接查看，安全性较好
                                    请求体的大小没有限制，可以发送任意大小的数据
                                如果向请求体发数据，能用post，尽量用post
                        第三部分 HTTP/1.1
                            协议的版本
                请求头
                    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
                    Accept-Encoding: gzip, deflate, br
                    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
                    Connection: keep-alive
                    Host: 127.0.0.1:5500
                    Referer: http://127.0.0.1:5500/07_http%E5%8D%8F%E8%AE%AE/01_httpxiey.html
                    Sec-Fetch-Dest: document
                    Sec-Fetch-Mode: navigate
                    Sec-Fetch-Site: same-origin
                    Sec-Fetch-User: ?1
                    Upgrade-Insecure-Requests: 1
                    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48
                    sec-ch-ua: "Chromium";v="112", "Microsoft Edge";v="112", "Not:A-Brand";v="99"
                    sec-ch-ua-mobile: ?0
                    sec-ch-ua-platform: "Windows"
                    -请求头也是名值对结构，用来告诉服务器我们浏览器的信息
                    -每个请求头都有它的作用：
                        Accept 浏览器可以接收的文件类型
                        Accept-Encoding 浏览器允许的压缩的编码
                        Accept-Language 浏览器可以将接受的语言
                        User-Agent 用户代理，他是一段用来描述浏览器信息的字符串
                空行
                    -用来分隔请求头和请求体
                请求体
                    -post请求通过请求体发送数据
        请求报文：
            GET /07_http%E5%8D%8F%E8%AE%AE/01_httpxiey.html?username=%E5%AD%99%E6%82%9F%E7%A9%BA HTTP/1.1
            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
            Accept-Encoding: gzip, deflate, br
            Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
            Connection: keep-alive
            Host: 127.0.0.1:5500
            Referer: http://127.0.0.1:5500/07_http%E5%8D%8F%E8%AE%AE/01_httpxiey.html
            Sec-Fetch-Dest: document
            Sec-Fetch-Mode: navigate
            Sec-Fetch-Site: same-origin
            Sec-Fetch-User: ?1
            Upgrade-Insecure-Requests: 1
            User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48
            sec-ch-ua: "Chromium";v="112", "Microsoft Edge";v="112", "Not:A-Brand";v="99"
            sec-ch-ua-mobile: ?0
            sec-ch-ua-platform: "Windows"
        
        响应报文：
            响应首行
                HTTP/1.1 200 OK
                    200 响应状态码
                    ok 对响应状态码的描述
                    -响应状态码规则：
                        1xx 请求处理中
                        2xx 成功
                        3xx 请求重定向
                        4xx 表示客户端错误
                        5xx 表示服务器的错误
            响应头
                -响应头也是一个个名值对结构，用来告诉浏览器响应的信息
                Content-Type: text/html; charset=UTF-8  ,用来描述响应体的类型
                Content-Length: 1794 ,用来描述响应体的大小
            空行
                -用来分隔响应头和响应体
            响应体
                -响应体就是服务器返回给客户端的内容
                网页，css,js,图片等资源会作为响应报文的响应体
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta http-equiv="X-UA-Compatible" content="IE=edge">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Document</title>
                </head>
                <body>
                    <form method="get" action="./02_target.html">
                        <input type="text" name="username">
                        <input type="password" name="password">
                        <button>提交</button>
                    </form>
                <!-- Code injected by live-server -->
                <script>
                    // <![CDATA[  <-- For SVG support
                    if ('WebSocket' in window) {
                        (function () {
                            function refreshCSS() {
                                var sheets = [].slice.call(document.getElementsByTagName("link"));
                                var head = document.getElementsByTagName("head")[0];
                                for (var i = 0; i < sheets.length; ++i) {
                                    var elem = sheets[i];
                                    var parent = elem.parentElement || head;
                                    parent.removeChild(elem);
                                    var rel = elem.rel;
                                    if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
                                        var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
                                        elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
                                    }
                                    parent.appendChild(elem);
                                }
                            }
                            var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
                            var address = protocol + window.location.host + window.location.pathname + '/ws';
                            var socket = new WebSocket(address);
                            socket.onmessage = function (msg) {
                                if (msg.data == 'reload') window.location.reload();
                                else if (msg.data == 'refreshcss') refreshCSS();
                            };
                            if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
                                console.log('Live reload enabled.');
                                sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
                            }
                        })();
                    }
                    else {
                        console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
                    }
                    // ]]>
                </script>
                </body>
                </html> 
        响应报文:
            HTTP/1.1 200 OK
            Vary: Origin
            Access-Control-Allow-Credentials: true
            Accept-Ranges: bytes
            Cache-Control: public, max-age=0
            Last-Modified: Mon, 17 Apr 2023 06:30:29 GMT
            ETag: W/"12d-1878de860e6"
            Content-Type: text/html; charset=UTF-8
            Content-Length: 1794
            Date: Mon, 17 Apr 2023 07:11:31 GMT
            Connection: keep-alive
            Keep-Alive: timeout=5